
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # 开启和关闭gzip模式
    gzip on;
    # gizp压缩起点，文件大于1k才进行压缩
    gzip_min_length 2000k;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间
    gzip_comp_level 3;
    # 进行压缩的文件类型。
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    # nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩
    gzip_static on;
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # 设置压缩所需要的缓冲区大小，以4k为单位，如果文件为7k则申请2*4k的缓冲区
    gzip_buffers 2 4k;
    # 设置gzip压缩针对的HTTP协议版本
    gzip_http_version 1.1;
    # 禁用IE 6 gzip
    gzip_disable "MSIE [1-6]\.";

    #include /etc/nginx/conf.d/*.conf;

	# 跨域配置
    #add_header Access-Control-Allow-Origin *;
    #add_header Access-Control-Allow-Headers X-Requested-With;
    #add_header Access-Control-Allow-Methods GET,POST,OPTIONS;

    # 显示目录
    #autoindex on;
    # 显示文件大小
    #autoindex_exact_size on;
    # 显示文件时间
    #autoindex_localtime on;

    #server { # 配置IP跟未在conf.d目录下配置过站点的域名访问直接返回403
		#listen    80 default_server;
		#listen    443 ssl default_server;
		#server_name _;

		#ssl_certificate      /home/cert/nikouer.com/nikouer.com.pem;
		#ssl_certificate_key  /home/cert/nikouer.com/nikouer.com.key;

		#ssl_session_cache    shared:SSL:1m;
		#ssl_session_timeout  5m;

        #ssl_ciphers  HIGH:!aNULL:!MD5;
        #ssl_prefer_server_ciphers  on;
		#return 403;
    #}

    server {
        listen  [::]:80;
		listen 80;
		server_name localhost;

        # location ^~/

        # 普通匹配，以最大前缀进行匹配
        # 后台api接口
        location /api {
            proxy_pass http://127.0.0.1:9527;
            proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号
            proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址
        }
        location /picture {
            root   /home/www;
        }
        location / {
            root   /home/www; # 发布web项目的目录
            index index.html index.htm;
        }

    }


}

